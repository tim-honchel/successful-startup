@*complete a form to create a new business plan*@

@page "/newplan"

@*for getting current user information*@
@inject AuthenticationStateProvider provider
@*for reading and writing to database*@
@inject ReadOnlyApi readApi
@inject WriteOnlyApi writeApi
@*for converting Domain entities to Data entities*@
@inject MappingProfile mapper

@using Microsoft.AspNetCore.Components.Authorization @*for AuthenticationStateProvider*@
@using Microsoft.AspNetCore.Components.Forms @*for EditForm*@
@using SuccessfulStartup.Data.Authentication
@using SuccessfulStartup.Data
@using SuccessfulStartup.Data.APIs
@using SuccessfulStartup.Data.Entities



<h1>Create a New Business Plan</h1>

<br />

<AuthorizeView> @*determines which content to show, based on user authorization*@

    <Authorized>

        <EditForm Model="plan" Context="planContext" OnValidSubmit="HandleValidSubmit">

            <DataAnnotationsValidator /> @*checks if input meets requirements specified by data annotations in entity model*@

            <label for="Name" class="control-label">Title: </label>
            <br />
            <InputText @bind-Value="plan.Name" /> @*links input box to property*@
            <ValidationMessage For="( () =>plan.Name )" style="color:red" /> @*displays only if input is invalid and the entity model property includes a validation message*@

            <br />
            <br />

            <label for="Description" class="control-label">Description: </label>
            <br />
            <InputText @bind-Value="plan.Description" />
            <ValidationMessage For="( () =>plan.Description )" style="color:red" />


            <br/>
            <br/>

            <button type="submit" class="btn btn-primary">Create</button>

            <br />
            <br />
            <p style="color:red">@message</p>

        </EditForm>

    </Authorized>

    <NotAuthorized>
         <p style="color:red">You must be logged in to see this information.</p>
    </NotAuthorized>

</AuthorizeView>



@code{
    private BusinessPlan plan { get; set; } = new BusinessPlan(); @*needs to be initialized or there is a runtime error stating no model was found*@
    private string message = "";

    public void HandleValidSubmit()
    {
        try
        {
            writeApi.SaveNewPlan(mapper.BusinessPlanDataToDomain(plan));
            message = "New business plan created successfully!";
        }
        catch (Exception)
        {
            message = "Failed to create new business plan.";
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        var authenticationState = await provider.GetAuthenticationStateAsync();
        var user = authenticationState.User.Identity.Name;
        plan.AuthorId = await readApi.GetUserIdByUsername(user); @*gets ID of current user to save as foreign key*@
    }
}