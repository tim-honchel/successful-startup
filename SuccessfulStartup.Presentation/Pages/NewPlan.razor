@*complete a form to create a new business plan*@

@page "/plans/new"

@*for making API calls*@
@inject IApiCallService service
@*for getting current user information*@
@inject AuthenticationStateProvider provider

@using Microsoft.AspNetCore.Components.Authorization @*for AuthenticationStateProvider*@
@using Microsoft.AspNetCore.Components.Forms @*for EditForm*@
@using SuccessfulStartup.Api.ViewModels

<h1 id="header">Create a New Business Plan</h1>

<br />

<AuthorizeView> @*determines which content to show, based on user authorization*@

    <Authorized>

        <EditForm id="form" Model="plan" Context="planContext" OnValidSubmit="HandleValidSubmit" hidden="@formHidden">

            <DataAnnotationsValidator /> @*checks if input meets requirements specified by data annotations in entity model*@

            <label for="Name" class="control-label">Title: </label>
            <br />
            <InputText @bind-Value="plan.Name" id="name" /> @*links input box to property*@
            <ValidationMessage For="( () =>plan.Name )" style="color:red" /> @*displays only if input is invalid and the entity model property includes a validation message*@

            <br />
            <br />

            <label for="Description" class="control-label">Description: </label>
            <br />
            <InputText @bind-Value="plan.Description" id="description" />
            <ValidationMessage For="( () =>plan.Description )" style="color:red" />

            <br/>
            <br/>
            @if (creationStatus == "unsaved")
            {
                <button type="submit" class="btn btn-primary">Create</button>
                <br />
                <br />
            }

        </EditForm>
        
        <p id="message" style="color:red">@message</p>

        @if (newId > 0) //TODO: newID does not re-render here after value change
            {
                <a href="/plans/@newId">View/Edit Plan</a>
            }

    </Authorized>

    <NotAuthorized>
         <p style="color:red">You must be logged in to see this information.</p>
    </NotAuthorized>

</AuthorizeView>

@code{
    private BusinessPlanViewModel plan { get; set; } = new();
    public string authorId = "";
    private string message = "";
    private string creationStatus = "unsaved";
    private bool formHidden = false;
    private int newId { get; set; } // auto-generated Id of created plan

    public async void HandleValidSubmit()
    {
        plan.AuthorId = authorId; // needs to be set after submit, otherwise may appear as null
        creationStatus = "saved"; // disables button, preventing duplicate press
        message = "Saving plan...";
        try
        {
            message = "New business plan created successfully!"; // needs to be before API call in order to render
            newId = await service.SaveNewPlanAsync(plan);  // service manages all HTTPClient requests to the API   
        }
        catch (Exception exception)
        {
            creationStatus = "unsaved";
            message = $"{exception.Message} Please resubmit. If the problem persists, please report the following error to Support: {exception.GetType()}"; // will display the error message provided by the exception
        }
    }

    protected async override Task OnParametersSetAsync() // don't use OnInitialized, results in runtime error where model cannot be found 
    {
        var authenticationState = await provider.GetAuthenticationStateAsync();
        var user = authenticationState.User.Identity.Name;
        try
        {
            authorId = await service.GetUserIdByUsernameAsync(user); // service manages all HTTPClient requests to the API, gets authorID to set as foreign key
        }
        catch (Exception exception) // could be ArgumentNull, NullReference, InvalidOperation, or other
        {
            formHidden = true; // prevent submission of new business plan
            message = $"{exception.Message} Please make sure you are logged in correctly and reload this page. If the problem persists, please report the following error to Support: {exception.GetType()}"; // will display the error message provided by the exception
        }

    }
}