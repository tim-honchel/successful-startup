@*displays all the business plans belonging to the current user*@

@page "/plans"

@*for getting current user information*@
@inject AuthenticationStateProvider provider
@*for making API calls*@
@inject IApiCallService service
@*for page navigation*@
@inject NavigationManager navigation

@using Microsoft.AspNetCore.Components @*for NavigationManager*@
@using Microsoft.AspNetCore.Components.Authorization @*for AuthenticationStateProvider*@
@using Microsoft.AspNetCore.Components.Web.Virtualization @*for Virtualize*@
@using SuccessfulStartup.Api.ViewModels
@using System.Diagnostics

<h1 id="header">Your Business Plans</h1>
<br />

<CascadingAuthenticationState> @*provides authentication and authorization state data*@
    <AuthorizeView> @*determines which content to show, based on user authorization*@

        <Authorized>

            <p>Click on a plan to see more details</p>
            <br />

            <table id="plans" class="table">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                </tr>
                    <Virtualize Items="plans" Context="plan"> @*renders faster than foreach loop*@
                        <tr id="plan">
                            <td><a href="/plans/@plan.Id">@plan.Name</a></td>
                            <td>@plan.Description</td>
                        </tr>
                    </Virtualize>
            </table>

            <p style="color:red">@message</p>

            <br />
            <button id="new-link" class="btn btn-primary" @onclick="@(() => navigation.NavigateTo("plans/new"))">Create a New Plan</button>

        </Authorized>

        <NotAuthorized>
            <p style="color:red">You must be logged in to see this information.</p>
        </NotAuthorized>

    </AuthorizeView>
</CascadingAuthenticationState>



@code {
    public string authorId;
    private List<BusinessPlanViewModel> plans { get; set; } = new();
    private string message = "Loading...";

    protected override async Task OnParametersSetAsync() 
    @*don't use OnInitialized, causes runtime error where model can't be found*@
    {
        //var claims = provider.GetAuthenticationStateAsync().Result.User.Claims;
        try
        {
            //authorId = provider.GetAuthenticationStateAsync().Result.User.Claims.Where(claim => claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").FirstOrDefault().Value; // gets userId from the default claim
            authorId = provider.GetAuthenticationStateAsync().Result.User.Claims.Where(claim => claim.Type == "userId").FirstOrDefault().Value; // gets userId from the custom claim
        }
        catch (NullReferenceException)
        {
            authorId = "unavailable";
        }
        try
        {
            Stopwatch stopwatch = new();
            stopwatch.Start();
            plans = await service.GetAllPlansByAuthorIdAsync(authorId); // service manages all HTTPClient requests to the API;
            message = "";
            Console.WriteLine($"GetAllPlans: {stopwatch.Elapsed}");
        }
        catch (Exception)
        {
            message = "Failed to load business plans from database.";
        }

    }
}
