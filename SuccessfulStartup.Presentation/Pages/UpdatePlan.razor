@page "/plans/{planId:int}/update"

@*for reading and writing to database*@
@inject ReadOnlyApi readApi
@inject WriteOnlyApi writeApi
@*for converting Domain entities to Data entities, without the need to access Automapper and domain level*@
@inject EntityConverter entityConverter

@using Microsoft.AspNetCore.Components.Authorization @*for AuthenticationStateProvider*@
@using Microsoft.AspNetCore.Components.Forms @*for EditForm*@
@using SuccessfulStartup.Data.APIs
@using SuccessfulStartup.Data.Entities

<h1>Edit Your Plan</h1>
<p> Make the desired changes, then click "Save Changes" to update your plan.</p>

<br />


<AuthorizeView> @*determines which content to show, based on user authorization*@

    <Authorized>

        <EditForm Model="plan" Context="planContext" OnValidSubmit="HandleValidSubmit">

            <DataAnnotationsValidator /> @*checks if input meets requirements specified by data annotations in entity model*@

            <label for="Name" class="control-label">Title: </label>
            <br />
            <InputText @bind-Value="plan.Name" id="Name" /> @*links input box to property*@
            <ValidationMessage For="( () =>plan.Name )" style="color:red" /> @*displays only if input is invalid and the entity model property includes a validation message*@

            <br />
            <br />

            <label for="Description" class="control-label">Description: </label>
            <br />
            <InputText @bind-Value="plan.Description" id="Description"/>
            <ValidationMessage For="( () =>plan.Description )" style="color:red" />


            <br/>
            <br/>

            <button type="submit" class="btn btn-primary">Save Changes</button>

            <br />
            <br />
            <p id="Message" style="color:red">@message</p>

        </EditForm>

    </Authorized>

    <NotAuthorized>
         <p style="color:red">You must be logged in to see this information.</p>
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter]
    public int planId { get; set; }

    private BusinessPlan plan { get; set; } = new BusinessPlan();
    private string message = "";

    public async void HandleValidSubmit()
    {
        try
        {
            await writeApi.UpdatePlan(entityConverter.Convert(plan));
            message = "Business plan updated successfully!";
        }
        catch (Exception)
        {
            message = "Failed to update business plan.";
        }

    }

    protected async override Task OnParametersSetAsync() // don't use OnInitialized, results in runtime error where model cannot be found
    {
        plan = entityConverter.Convert(await readApi.GetPlanById(planId));
    }
}