@*update or delete a business plan*@

@page "/plans/{planId:int}/update"

@*for making API calls*@
@inject IApiCallService service

@using Microsoft.AspNetCore.Components.Authorization @*for AuthenticationStateProvider*@
@using Microsoft.AspNetCore.Components.Forms @*for EditForm*@
@using SuccessfulStartup.Api.ViewModels;

<PageTitle>Edit Your Plan</PageTitle>

<h1 id="header">Edit Your Plan</h1>
<p> Make the desired changes, then click "Save Changes" to update your plan.</p>

<br />

<AuthorizeView> @*determines which content to show, based on user authorization*@

    <Authorized>

        @if (deletionStatus != "deleted")
        {
            <EditForm id="form" Model="plan" Context="planContext" OnValidSubmit="HandleValidSubmit">

            <DataAnnotationsValidator /> @*checks if input meets requirements specified by data annotations in entity model*@

            <label for="Name" class="control-label">Title: </label>
            <br />
            <InputText id="name" @bind-Value="plan.Name" @oninput="HandleTextChange" /> @*links input box to property*@
            <ValidationMessage For="( () =>plan.Name )" style="color:red" /> @*displays only if input is invalid and the entity model property includes a validation message*@

            <br />
            <br />

            <label for="Description" class="control-label">Description: </label>
            <br />
            <InputText id="description" @bind-Value="plan.Description" @oninput="HandleTextChange" /> @*oninput is used because onchange is already used by bind-Value*@
            <ValidationMessage For="( () =>plan.Description )" style="color:red" />


            <br/>
            <br/>

            <button type="submit" class="btn btn-primary" disabled=@disableSave>Save Changes</button>

            <br />

        </EditForm>
        }

        <br />
        <p id="message" class="@messageClass">@message</p>

        @if (deletionStatus == "active")
        {
            <btn id="delete" class="btn btn-danger" @onclick="PromptDelete">Delete Plan</btn>
        }
        else if (deletionStatus == "prompt")
        {
            <p class="text-danger">Are you sure you want to delete this business plan permanently?</p>
             <btn id="confirmDelete" class="btn btn-danger" @onclick="HandleDelete">Confirm Delete</btn>
            <btn id="cancelDelete" class="btn btn-success" @onclick="CancelDelete">Cancel</btn>
        }
        
    </Authorized>

    <NotAuthorized>
         <p class="text-danger">You must be logged in to see this information.</p>
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter]
    public int planId { get; set; }

    private BusinessPlanViewModel plan { get; set; } = new();
    private string message = "";
    private string messageClass = "text-danger";
    private string deletionStatus = "active";
    private bool disableSave = true;

    public void CancelDelete()
    {
        deletionStatus = "active";
    }

    public async void HandleDelete()
    {
        try
        {
            messageClass = "text-success";
            message = "Business plan deleted successfully!";
            deletionStatus = "deleted";
            await service.DeletePlanAsync(plan.Id);
        }
        catch (Exception exception)
        {
            messageClass = "text-danger";
            message = $"Failed to delete business plan. {exception.Message} Please try again. If the problem persists, please report the following error to Support: {exception.GetType()}";
        }
    }

    public void HandleTextChange()
    {
        disableSave = false;
        message = "";
    }

    public async void HandleValidSubmit()
    {
        try
        {
            disableSave = true;
            messageClass = "text-success";
            message = "Business plan updated successfully!";
            await service.UpdatePlanAsync(plan);
        }
        catch (Exception exception)
        {
            messageClass = "text-danger";
            message = $"Failed to update business plan. {exception.Message} Please try again. If the problem persists, please report the following error to Support: {exception.GetType()}";
        }

    }

    protected async override Task OnParametersSetAsync() // don't use OnInitialized, results in runtime error where model cannot be found
    {
        plan = await service.GetPlanByIdAsync(planId);
    }

    public void PromptDelete()
    {
        deletionStatus = "prompt";
    }
}